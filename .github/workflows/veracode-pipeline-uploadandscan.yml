name: Veracode Static Pipeline Scan And Upload

on:
  workflow_call:
    inputs:
      policy_name:
        required: true
        type: string

  
jobs:
  pipeline_scan:
    runs-on: ubuntu-latest
    name: pipeline upload scan

    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      
      # get the compiled binary from a previous job
      - name: get archive
        uses: actions/download-artifact@v3
        with:
          name: veracode-artifact
          path: ./veracode_artifact_directory

      - name: Get the name of the downloaded files
        run: |
          artifact_file=$(ls -1 ./veracode_artifact_directory | head -n 1)
          echo "veracode_artifact=$artifact_file" >> $GITHUB_ENV

      # run the pipeline upload scan action
      - name: Veracode Upload And Scan
        id: pipeline-upload-scan
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          appname: 'david-cicd-test'
          createprofile: false
          filepath: ./veracode_artifact_directory/${{ env.veracode_artifact }}
          # filepath: 'app/target/verademo.war'
          vid: '${{ secrets.API_ID }}'
          vkey: '${{ secrets.API_KEY }}'
          veracode_policy_name: ${{ inputs.policy_name }}
        # Must be false, so the import-issues job can create issues, and fail upon findings.
          fail_build: false
#          createsandbox: 'true'
#          sandboxname: 'SANDBOXNAME'
#          scantimeout: 0
#          exclude: '*.js'
#          include: '*.war'
#          criticality: 'VeryHigh'

          
# This step will import the flaws from the step above
  import-issues:
    needs: pipeline_scan
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: get scan results
        uses: actions/download-artifact@v3
        with:
          name: Veracode Pipeline-Scan Results
      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@v2.1.19
        with:
          scan-results-json: 'results.json'
        # If the pipeline should fail upon found flaws
          fail_build: true          
